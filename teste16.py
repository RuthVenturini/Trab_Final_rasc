# -*- coding: utf-8 -*-
"""teste16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xhkr25mey31NMKp0syb3xgYjvsaPwfqz
"""

import streamlit as st
from streamlit_folium import folium_static
import folium
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import openrouteservice
from openrouteservice import convert

# Mapa base com marcadores
m = folium.Map(location=[-25.426372, -49.307217], zoom_start=12)

coordenadas = {
    "Jardim Bot√¢nico": [-49.238214, -25.443083],
    "Parque Tangu√°": [-49.282423, -25.379066],
    "Museu Oscar Niemeyer": [-49.26723, -25.410112],
    "Parque Barigui": [-49.307217, -25.426372],
    "Santa Felicidade": [-49.334319, -25.400817],
    "Bosque do Alem√£o": [-49.288117, -25.404467],
    "√ìpera de Arame": [-49.276169, -25.384618],
    "Feira do Largo da Ordem": [-49.273755, -25.427692],
    "Memorial da Seguran√ßa no Transporte": [-49.364862, -25.452439],
    "Shopping P√°tio Batel": [-49.290818, -25.44293],
    "Ligga Arena": [-49.276924, -25.448305],
    "Museu de Arte Ind√≠gena": [-49.285374, -25.454071],
    "Memorial Ucraniano": [-49.304958, -25.402374],
    "Shopping Esta√ß√£o": [-49.267398, -25.43816],
    "Museu do Holocausto de Curitiba": [-49.272559, -25.415166],
}

# Lista de locais tur√≠sticos
locais = [
    ("√ìpera de Arame", "https://operadearame.com/", -25.384618, -49.276169, 'gray'),
    ("Jardim Bot√¢nico", "https://www.curitiba.pr.gov.br/conteudo/jardim-botanico/174",-25.443083, -49.238214, 'green'),
    ("Parque Tangu√°", "https://www.curitiba.pr.gov.br/conteudo/parque-tangua/176", -25.379066, -49.282423, 'green'),
    ("Museu Oscar Niemeyer", "https://www.museuoscarniemeyer.org.br/", -25.410112, -49.26723, 'blue'),
    ("Parque Barigui", "https://www.curitiba.pr.gov.br/conteudo/parque-barigui/175", -25.426372, -49.307217, 'green'),
    ("Santa Felicidade", "https://www.curitiba.pr.gov.br/conteudo/santa-felicidade/187", -25.400817, -49.334319, 'orange'),
    ("Bosque do Alem√£o", "https://www.curitiba.pr.gov.br/conteudo/bosque-do-alemao/180", -25.404467, -49.288117, 'green'),
    ("Feira do Largo da Ordem", "https://www.curitiba.pr.gov.br/conteudo/feira-do-largo-da-ordem/79", -25.427692, -49.273755, 'red'),
    ("Memorial da Seguran√ßa no Transporte", "https://www.memorialseguranca.com.br/", -25.452439, -49.364862, 'blue'),
    ("Shopping P√°tio Batel", "https://www.patiobatel.com.br/", -25.44293, -49.290818, 'black'),
    ("Ligga Arena", "https://www.liggaarena.com.br/", -25.448305, -49.276924, 'pink'),
    ("Museu de Arte Ind√≠gena", "https://museudearteindigena.com.br/", -25.454071, -49.285374, 'blue'),
    ("Memorial Ucraniano", "https://www.curitiba.pr.gov.br/conteudo/memorial-ucraniano/181", -25.402374, -49.304958, 'purple'),
    ("Shopping Esta√ß√£o", "https://www.shoppingestacao.com.br/", -25.43816, -49.267398, 'black'),
    ("Museu do Holocausto de Curitiba", "https://www.museudoholocausto.org.br/", -25.415166, -49.272559, 'blue'),
]

for nome, url, lat, lon, cor in locais:
    html_popup = f"""
    <div>
        <strong>{nome}</strong><br>
        <a href="{url}" target="_blank">Visite o site</a>
    </div>
    """
    iframe = folium.IFrame(html=html_popup, width=200, height=80)
    popup = folium.Popup(iframe, max_width=250)
    folium.Marker(
        location=[lat, lon],
        popup=popup,
        icon=folium.Icon(color=cor, icon='star')
    ).add_to(m)

# Fun√ß√£o para criar legenda
def criar_legenda():
    patches = [
        mpatches.Patch(color='green', label='Parques/Jardins'),
        mpatches.Patch(color='blue', label='Museus'),
        mpatches.Patch(color='red', label='Feiras'),
        mpatches.Patch(color='orange', label='Bairros'),
        mpatches.Patch(color='gray', label='Teatros'),
        mpatches.Patch(color='black', label='Shopping'),
        mpatches.Patch(color='pink', label='Arena e est√°dios'),
        mpatches.Patch(color='purple', label='Locais hist√≥ricos'),
    ]
    fig, ax = plt.subplots(figsize=(8, 2))
    ax.legend(handles=patches, loc='center', ncol=4, frameon=False)
    ax.axis('off')
    return fig

# Configura√ß√£o da p√°gina
PAGE_CONFIG = {"page_title": "Aplica√ß√£o de Mapas", "page_icon": ":smiley:", "layout": "centered"}
st.set_page_config(**PAGE_CONFIG)

def main():
    st.title("Mapa de Curitiba para rotas tur√≠sticas")
    menu = ["Home", "Mapa", "Fa√ßa sua rota"]
    choice = st.sidebar.selectbox("Menu", menu)

    if choice == 'Home':
        st.text("Planejar sua viagem ficou muito mais f√°cil e pr√°tico.")
        st.text("Nosso aplicativo foi criado especialmente para apoiar voc√™, turista, na organiza√ß√£o de roteiros e na descoberta das melhores experi√™ncias que Curitiba tem a oferecer. Aqui, voc√™ encontra os 15 principais pontos tur√≠sticos da cidade, cuidadosamente selecionados com base no ranking do TripAdvisor, garantindo que voc√™ visite os locais mais bem avaliados e imperd√≠veis. Explore rotas personalizadas, monte seu pr√≥prio itiner√°rio e aproveite cada momento na capital ecol√≥gica do Brasil com tranquilidade e seguran√ßa.")
        st.text("Curitiba te espera. E a gente te ajuda a chegar l√°.")

    elif choice == 'Mapa':
        st.subheader("Visualizar Mapa")
        folium_static(m)

        st.subheader("Legenda")
        fig = criar_legenda()
        st.pyplot(fig)

    else:
        st.subheader("Fa√ßa sua rota.")

        pontos_turisticos = [
            "Jardim Bot√¢nico",
            "Parque Tangu√°",
            "Museu Oscar Niemeyer",
            "Parque Barigui",
            "Santa Felicidade",
            "Bosque do Alem√£o",
            "√ìpera de Arame",
            "Feira do Largo da Ordem",
            "Memorial da Seguran√ßa no Transporte",
            "Shopping P√°tio Batel",
            "Ligga Arena",
            "Museu de Arte Ind√≠gena",
            "Memorial Ucraniano",
            "Shopping Esta√ß√£o",
            "Museu do Holocausto de Curitiba"
        ]

        mobilidade = [
            "A p√©",
            "Bicicleta",
            "Carro"
        ]

        PT1 = st.selectbox("Escolha o primeiro local para visitar:", pontos_turisticos)
        st.write(f"Voc√™ selecionou: **{PT1}**")

        PT2 = st.selectbox("Escolha o segundo local para visitar:", pontos_turisticos)
        st.write(f"Voc√™ selecionou: **{PT2}**")

        PT3 = st.selectbox("Escolha o terceiro local para visitar:", pontos_turisticos)
        st.write(f"Voc√™ selecionou: **{PT3}**")

        deslocamento = st.selectbox("Escolha entre as op√ß√µes de deslocamento:", mobilidade)
        st.write(f"Voc√™ selecionou: **{deslocamento}**")

        # Bot√£o para gerar rota
        if st.button("Calcular rota"):
            import simplekml

            ORS_API_KEY = '5b3ce3597851110001cf6248621ab27be7384c4d9e71a7e8e960d6b9'
            client = openrouteservice.Client(key=ORS_API_KEY)

            coords = [
                coordenadas[PT1],
                coordenadas[PT2],
                coordenadas[PT3]
            ]

            nomes = [PT1, PT2, PT3]

            modo_transporte = {
                "A p√©": "foot-walking",
                "Bicicleta": "cycling-regular",
                "Carro": "driving-car"
            }

            try:
                route = client.directions(
                    coordinates=coords,
                    profile=modo_transporte[deslocamento],
                    format='geojson'
                )

                # Extrair tempo (em segundos)
                tempo_total_segundos = route['features'][0]['properties']['summary']['duration']
                tempo_minutos = round(tempo_total_segundos / 60)
                st.success(f"Tempo estimado de deslocamento: **{tempo_minutos} minutos**")

                # Criar mapa com rota
                rota_mapa = folium.Map(location=coords[0][::-1], zoom_start=13)
                folium.GeoJson(route, name="rota").add_to(rota_mapa)

                # Adicionar marcadores com n√∫mero e nome
                for i, (nome, coord) in enumerate(zip(nomes, coords), start=1):
                    folium.Marker(
                        location=coord[::-1],
                        popup=f"{i}. {nome}",
                        tooltip=nome,
                        icon=folium.Icon(color="blue", icon="info-sign")
                    ).add_to(rota_mapa)

                st.subheader("Rota sugerida:")
                folium_static(rota_mapa)

                # Criar KML com pontos tur√≠sticos (marcadores) e a rota real
                kml = simplekml.Kml()

                # Adicionar pontos tur√≠sticos como marcadores
                for i, (nome, coord) in enumerate(zip(nomes, coords), start=1):
                     kml.newpoint(name=f"{i}. {nome}", coords=[(coord[0], coord[1])])

                # Extrair coordenadas reais da rota (da API)
                coordenadas_rota = route['features'][0]['geometry']['coordinates']  # lista de [lon, lat]

                # Adicionar linha da rota real no KML
                linha = kml.newlinestring(
                  name="Rota calculada",
                  coords=coordenadas_rota
                  )
                linha.style.linestyle.width = 5
                linha.style.linestyle.color = simplekml.Color.blue

                # Salvar arquivo KML
                kml_path = "/tmp/rota.kml"
                kml.save(kml_path)

                # Bot√£o de download
                with open(kml_path, "rb") as file:
                  st.download_button(
                  label="üì• Baixar rota em KML",
                  data=file,
                  file_name="rota_curitiba.kml",
                  mime="application/vnd.google-earth.kml+xml"
                  )

            except Exception as e:
                st.error(f"Erro ao calcular rota: {e}")

if __name__ == "__main__":
    main()